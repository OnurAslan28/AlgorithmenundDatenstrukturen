model List

class List
  attributes
    elements:Sequence(OclAny)

  operations
    append(element:OclAny)

    remove(index:Integer)

    insertAt(element:OclAny, index:Integer)

    size():Integer = 
      self.elements->size()

    indexOf(element:OclAny) : Integer =
      self.elements->asSequence()->indexOf(element)
end

constraints

context List::append(element:OclAny)
  post itemAdded:
    self.size@pre() + 1 = self.size()
  post itemIsLast:
    self.elements->at(self.elements->size()) = element


context List::remove(index:Integer)
  post itemRemoved:
    self.size@pre() - 1 = self.size()
  post headCheck:
    self.elements->subSequence(1, index - 1) = self.elements@pre->subSequence(1, index - 1)
  post tailCheck:
    self.elements@pre->subSequence(index+1, self.size@pre()) = self.elements->subSequence(index, self.size())

context List::insertAt(element:OclAny, index:Integer)
  post itemAdded:
    self.size@pre() + 1 = self.size()
  post correctIndex:
    self.elements->at(index) = element
  post headCheck:
    self.elements->subSequence(1, index - 1) = self.elements@pre->subSequence(1, index - 1)
  post tailCheck:
    self.elements@pre->subSequence(index, self.size@pre()) = self.elements->subSequence(index+1, self.size())
